record dualrail
{
	node<1> t := 0;
	node<1> f := 0;
	enforce{~t | ~f};
}

// [active vs passive][number of phases][ack vs enable][protocol]

channel a4pa
{
	node<1> r := 0;
	node<1> a := 0;
	
	operator!()
	{
		r+; [a]; r-; [~a];
	}
	
	operator?()
	{
		[r]; a+; [~r]; a-;
	}
	
	operator#()
	{
		r
	}
}

channel p4pa
{
	node<1> r := 0;
	node<1> a := 0;
	
	operator!()
	{
		[a]; r+; [~a]; r-; 
	}
	
	operator?()
	{
		a+; [r]; a-; [~r];
	}
	
	operator#()
	{
		a
	}
}

channel a4pa1of2
{
	dualrail r;
	node<1> a := 0;
	
	operator!(dualrail i)
	{
		[	i.t	-> r.t+
		[]	i.f	-> r.f+
		]; [a]; (r.t-||r.f-); [~a]
	}
	
	operator?(dualrail i)
	{
		[ r.t -> i.t+
		[]r.f -> i.f+
		]; a+; [~r.t & ~r.f]; a-;
	}
	
	operator#()
	{
		r.t|r.f
	}
}

channel p4pa1of2
{
	dualrail r;
	node<1> a := 0;
	
	operator!(dualrail i)
	{
		[	a & i.t	-> r.t+
		[]	a & i.f	-> r.f+
		]; [~a]; (r.t-||r.f-)
	}
	
	operator?(dualrail i)
	{
		a+;
		[ r.t -> i.t+
		[]r.f -> i.f+
		]; a-; [~r.t & ~r.f]; 
	}
	
	operator#()
	{
		a
	}
}

channel a4pe1of2
{
	dualrail r;
	node<1> e := 1;
	
	operator!(dualrail i)
	{
		[	i.t	-> r.t+
		[]	i.f	-> r.f+
		]; [~e]; (r.t-||r.f-); [e]
	}
	
	operator?(dualrail i)
	{
		[ r.t -> i.t+
		[]r.f -> i.f+
		]; e-; [~r.t & ~r.f]; e+;
	}
	
	operator#()
	{
		r.t|r.f
	}
}

channel p4pe1of2
{
	dualrail r;
	node<1> e := 1;
	
	operator!(dualrail i)
	{
		[	~e & i.t	-> r.t+
		[]	~e & i.f	-> r.f+
		]; [e]; (r.t-||r.f-)
	}
	
	operator?(dualrail i)
	{
		e-;
		[ r.t -> i.t+
		[]r.f -> i.f+
		]; e+; [~r.t & ~r.f]; 
	}
	
	operator#()
	{
		e
	}
}

/*channel achan4p2b
{
	dualrail r1;
	dualrail r2;
	node<1> a := 0;
	
	operator!(node<2> i)
	{		
		(
			[	i[0]	-> r1.t+; 
			[]	~i[0]	-> r1.f+;
			]||
			[	i[1]	-> r2.t+; 
			[]	~i[1]	-> r2.f+;
			]
		);
		[a]; r1.t-;r1.f-;r2.t-;r2.f-; [~a];
	}
	
	operator?(node<2> i)
	{
		(
			[ r1.t & ~r1.f -> i[0]+
			[]r1.f & ~r1.t -> i[0]-
			]||
			[ r2.t & ~r2.f -> i[1]+
			[]r2.f & ~r2.t -> i[1]-
			]
		); a+; [~r1.t & ~r1.f & ~r2.t & ~r2.f]; a-;
	}
	
	operator#()
	{
		(r1.t|r1.f)&(r2.t|r2.f)
	}
}

channel pchan4p2b
{
	dualrail r1;
	dualrail r2;
	node<1> a := 0;
	
	operator!(node<2> i)
	{		
		[a];(
			[	i[0]	-> r1.t+;
			[]	~i[0]	-> r1.f+;
			]||
			[	i[1]	-> r2.t+; 
			[]	~i[1]	-> r2.f+;
			]
		);
		[~a]; r1.t-;r1.f-;r2.t-;r2.f-
	}
	
	operator?(node<2> i)
	{
		a+;(
			[ r1.t & ~r1.f -> i[0]+
			[]r1.f & ~r1.t -> i[0]-
			]||
			[ r2.t & ~r2.f -> i[1]+
			[]r2.f & ~r2.t -> i[1]-
			]
		); a-; [~r1.t & ~r1.f & ~r2.t & ~r2.f];
	}
	
	operator#()
	{
		a
	}
}*/