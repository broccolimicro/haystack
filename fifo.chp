record chan0b
{
	int<1> r;
	int<1> a;
}

record chan1b
{
	int<1> ra;
	int<1> t;
	int<1> f;
}

channel chan
{
	int<1> r := 0;
	int<1> a := 0;
	
	proc send()
	{
		r := 1;[a -> skip];r := 0;[~a -> skip]
	}
	
	proc recv()
	{
		[r -> skip];a := 1;[~r -> skip];a := 0
	}
}

proc fifo0b(chan0b l, chan0b r)
{
	// *[1 -> l?;r!]
	// *[1 -> [l.r -> skip];l.x+;[~l.r -> skip];l.a - ;r.r + ;[r.a -> skip];r.r-;[~r.a -> skip]]

	*[1 -> [l.r -> skip];r.r+;[r.a -> skip];r.r-;[~r.a -> skip];l.a +;[~l.r -> skip];l.a-]
}

/* This process represents an asynchronous 1 to 2 multiplexer
*/
proc mux0b2(chan0b i, chan0b o1, chan0b o2, chan1b s)
{
	// initialize variables at reset
	i.a := 0;
	o1.r := 0;
	o2.r := 0;
	s.ra := 0;
	*[1 -> 
		// wait for a request
		[s.t | s.f -> skip];
		// service the request
		[  s.f -> [i.r -> skip];o1.r := 1;[o1.a -> skip];i.a := 1;[~i.r -> skip];o1.r := 0;[~o1.a -> skip];i.a := 0
		[] s.t -> [i.r -> skip];o2.r := 1;[o2.a -> skip];i.a := 1;[~i.r -> skip];o2.r := 0;[~o2.a -> skip];i.a := 0
		];
		// clean up
		s.ra := 1;
		[~s.t & ~s.f -> skip];
		s.ra := 0;
	]
}