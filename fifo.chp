record chan0b
{
	int<1> r;
	int<1> a;
}

record chan1b
{
	int<1> ra;
	int<1> t;
	int<1> f;
}

channel chan
{
	int<1> r := 0;
	int<1> a := 0;
	
	proc send()
	{
		r+;[a];r-;[~a]
	}
	
	proc recv()
	{
		[r];a+;[~r];a-
	}
}

proc fifo0b(chan l, chan r)
{
	*[l?;r!]
	//*[[l.r];l.x+;[~l.r];l.a-;r.r+;[r.a];r.r-;[~r.a]]
	//*[[l.r];r.r+;[r.a];r.r-;[~r.a];l.a+;[~l.r];l.a-]
}

/* This process represents an asynchronous 1 to 2 multiplexer
*/
proc mux0b2(chan0b i, chan0b o1, chan0b o2, chan1b s)
{
	// initialize variables at reset
	i.a-;
	o1.r-;
	o2.r-;
	s.ra-;
	*[
		// wait for a request
		[s.t | s.f];
		// service the request
		[  s.f -> [i.r];o1.r+;[o1.a];i.a+;[~i.r];o1.r-;[~o1.a];i.a-
		[] s.t -> [i.r];o2.r+;[o2.a];i.a+;[~i.r];o2.r-;[~o2.a];i.a-
		];
		// clean up
		s.ra+;
		[~s.t & ~s.f];
		s.ra-;
	]
}
