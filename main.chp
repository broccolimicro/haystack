#include "channel.chp"
#include "math.chp"
#include "fifo.chp"

/*process full_adder(chan4p1b a, chan4p1b b, chan4p1b ci, chan4p1b s, chan4p1b co)
{
	(int<1> A||
	int<1> B||
	int<1> AaB||
	int<1> AxB||
	int<1> AxBxC||
	int<1> CC||
	int<1> C);
	
	(((a?A || b?B); AaB, AxB := A & B,(A & ~B) | (~A & B)) || ci?C);
	AxBxC, CC := AxB & ~C | ~AxB & C, AaB | (C & AxB);
	s!AxBxC || co!CC;
}*/

process mux0b2(chan4p0b i, chan4p0b o1, chan4p0b o2, chan4p1b s)
{
	//UM. DUDE. INPUT VALUES NEVER GET Xed OUT IF WE DON'T DO A CHANNEL COMM
	// initialize variables at reset
	i.a-;
	o1.r-;
	o2.r-;
	s.ra-;
	*[
		// wait for a request
		[s.t | s.f];
		// service the request
		[  s.f -> [i.r];o1.r+;[o1.a];i.a+;[~i.r];o1.r-;[~o1.a];i.a-
		[] s.t -> [i.r];o2.r+;[o2.a];i.a+;[~i.r];o2.r-;[~o2.a];i.a-
		];
		// clean up
		s.ra+;
		[~s.t & ~s.f];
		s.ra-;
	]
}


process slimmux0b2(chan4p0b i, chan4p0b o1, chan4p0b o2, chan4p1b s)
{
	int<1> c;
	*[
		s?c;
		[ ~c -> o1?;i!
		[] c -> o2?;i!
		];
	]
}

process nickPlay(chan4p0b a, chan4p0b b)
{
	[a.a];b.r+;[b.a];a.r+;[~a.a];b.r-;[~b.a];a.r-;
}
process main()
{
	/*
	chan4p0b A;
	chan4p0b B;
	chan4p0b C;
	chan4p1b D;
	*/
	chan4p0b E;
	chan4p0b F;
	nickPlay test(E, F);
	
	/*int<1> a := 1;
	int<1> b := 1;
	int<1> c := 1;
	int<1> d := 0;
	int<1> e;
	int<4> x := 1;
	int<2> y := 1;
	int<2> z := 1;
	int<2> w := 0;
	int<2> q;
	q := x[1..2]+y | z+w;
	e := a^b | c^d;*/
	
	//mux0b2 MyMux(A, B, C, D);
}
